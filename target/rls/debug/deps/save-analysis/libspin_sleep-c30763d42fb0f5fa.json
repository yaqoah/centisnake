{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0","program":"C:\\Users\\Balot\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","spin_sleep","--edition=2018","C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=c30763d42fb0f5fa","-C","extra-filename=-c30763d42fb0f5fa","--out-dir","c:\\Users\\Balot\\OneDrive\\Python\\Rust\\games\\snake\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Balot\\OneDrive\\Python\\Rust\\games\\snake\\target\\rls\\debug\\deps","--extern","once_cell=c:\\Users\\Balot\\OneDrive\\Python\\Rust\\games\\snake\\target\\rls\\debug\\deps\\libonce_cell-90262083494d1c87.rmeta","--extern","winapi=c:\\Users\\Balot\\OneDrive\\Python\\Rust\\games\\snake\\target\\rls\\debug\\deps\\libwinapi-4b1feede0e3f6ca9.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Balot\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Balot\\OneDrive\\Python\\Rust\\games\\snake\\target\\rls\\debug\\deps\\libspin_sleep-c30763d42fb0f5fa.rmeta"},"prelude":{"crate_id":{"name":"spin_sleep","disambiguator":[2895989247495925916,0]},"crate_root":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src","external_crates":[{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[5748888646060736057,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[11647781593125135854,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13810207351280985286,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10856308035441163175,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15195352194256834944,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8936219983177082535,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9514052684633617057,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11173665669995955307,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[11489992985031151541,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16828784558795307081,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10060143980449217236,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[14817981415011782061,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[16087529398371340149,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":14,"id":{"name":"winapi","disambiguator":[9642948108737213526,0]}},{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","num":15,"id":{"name":"once_cell","disambiguator":[7981614201203751029,0]}}],"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":0,"byte_end":11479,"line_start":1,"line_end":346,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1850,"byte_end":1851,"line_start":50,"line_end":50,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":0,"byte_end":11479,"line_start":1,"line_end":346,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":50},{"krate":0,"index":60},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":76}],"decl_id":null,"docs":" Accurate sleeping. Only use native sleep as far as it can be trusted, then spin.","sig":null,"attributes":[{"value":"/ Accurate sleeping. Only use native sleep as far as it can be trusted, then spin.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":0,"byte_end":84,"line_start":1,"line_end":1,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":85,"byte_end":88,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The problem with `thread::sleep` is it isn't always very accurate, and this accuracy varies","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":89,"byte_end":184,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ on platform and state. Spinning is as accurate as we can get, but consumes the CPU","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":185,"byte_end":271,"line_start":4,"line_end":4,"column_start":1,"column_end":87}},{"value":"/ rather ungracefully.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":272,"byte_end":296,"line_start":5,"line_end":5,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":297,"byte_end":300,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This library adds a middle ground, using a configurable native accuracy setting allowing","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":301,"byte_end":393,"line_start":7,"line_end":7,"column_start":1,"column_end":93}},{"value":"/ `thread::sleep` to wait the bulk of a sleep time, and spin the final section to guarantee","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":394,"byte_end":487,"line_start":8,"line_end":8,"column_start":1,"column_end":94}},{"value":"/ accuracy.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":488,"byte_end":501,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":502,"byte_end":505,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":506,"byte_end":520,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":521,"byte_end":524,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Simplest usage with default native accuracy is a drop in replacement for `thread::sleep`.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":525,"byte_end":618,"line_start":13,"line_end":13,"column_start":1,"column_end":94}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":619,"byte_end":632,"line_start":14,"line_end":14,"column_start":1,"column_end":14}},{"value":"/ # use std::time::Duration;","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":633,"byte_end":663,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"/ spin_sleep::sleep(Duration::new(1, 12_550_000));","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":664,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":717,"byte_end":724,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":725,"byte_end":728,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ More advanced usage, including setting a custom native accuracy, can be achieved by","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":729,"byte_end":816,"line_start":19,"line_end":19,"column_start":1,"column_end":88}},{"value":"/ constructing a `SpinSleeper`.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":817,"byte_end":850,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":851,"byte_end":864,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/ # use std::time::Duration;","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":865,"byte_end":895,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/ // Create a new sleeper that trusts native thread::sleep with 100μs accuracy","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":896,"byte_end":977,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ let spin_sleeper = spin_sleep::SpinSleeper::new(100_000);","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":978,"byte_end":1039,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1040,"byte_end":1043,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Sleep for 1.01255 seconds, this will:","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1044,"byte_end":1088,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"/ //  - thread:sleep for 1.01245 seconds, ie 100μs less than the requested duration","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1089,"byte_end":1175,"line_start":27,"line_end":27,"column_start":1,"column_end":86}},{"value":"/ //  - spin until total 1.01255 seconds have elapsed","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1176,"byte_end":1231,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ spin_sleeper.sleep(Duration::new(1, 12_550_000));","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1232,"byte_end":1285,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1286,"byte_end":1293,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1294,"byte_end":1297,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Sleep can also requested in `f64` seconds or `u64` nanoseconds","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1298,"byte_end":1364,"line_start":32,"line_end":32,"column_start":1,"column_end":67}},{"value":"/ (useful when used with `time` crate)","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1365,"byte_end":1405,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1406,"byte_end":1409,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1410,"byte_end":1423,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ # use std::time::Duration;","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1424,"byte_end":1454,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/ # let spin_sleeper = spin_sleep::SpinSleeper::new(100_000);","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1455,"byte_end":1518,"line_start":37,"line_end":37,"column_start":1,"column_end":64}},{"value":"/ spin_sleeper.sleep_s(1.01255);","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1519,"byte_end":1553,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ spin_sleeper.sleep_ns(1_012_550_000);","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1554,"byte_end":1595,"line_start":39,"line_end":39,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1596,"byte_end":1603,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1604,"byte_end":1607,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ OS-specific default accuracy settings should be good enough for most cases.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1608,"byte_end":1687,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1688,"byte_end":1695,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/ # use spin_sleep::SpinSleeper;","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1696,"byte_end":1730,"line_start":44,"line_end":44,"column_start":1,"column_end":35}},{"value":"/ let sleeper = SpinSleeper::default();","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1731,"byte_end":1772,"line_start":45,"line_end":45,"column_start":1,"column_end":42}},{"value":"/ # let _ = sleeper;","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1773,"byte_end":1795,"line_start":46,"line_end":46,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1796,"byte_end":1803,"line_start":47,"line_end":47,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12613,"byte_end":12623,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"LoopHelper","qualname":"::loop_helper::LoopHelper","value":"LoopHelper {  }","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" Tool for loop rate reporting and control.","sig":null,"attributes":[{"value":"/ Tool for loop rate reporting and control.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11550,"byte_end":11595,"line_start":7,"line_end":7,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11596,"byte_end":11599,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Can report mean rate per second of a loop over a configured","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11600,"byte_end":11663,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ report interval with [`LoopHelper::report_rate`](struct.LoopHelper.html#method.report_rate).","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11664,"byte_end":11760,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11761,"byte_end":11764,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Can limit a loop rate to a desired target using","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11765,"byte_end":11816,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"/ [`LoopHelper::loop_sleep`](struct.LoopHelper.html#method.loop_sleep).","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11817,"byte_end":11890,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11891,"byte_end":11894,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11895,"byte_end":11908,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11909,"byte_end":11912,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11913,"byte_end":11926,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/ use spin_sleep::LoopHelper;","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11927,"byte_end":11958,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11959,"byte_end":11962,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut loop_helper = LoopHelper::builder()","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":11963,"byte_end":12010,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/     .report_interval_s(0.5) // report every half a second","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12011,"byte_end":12072,"line_start":21,"line_end":21,"column_start":1,"column_end":62}},{"value":"/     .build_with_target_rate(250.0); // limit to 250 FPS if possible","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12073,"byte_end":12144,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12145,"byte_end":12148,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let mut current_fps = None;","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12149,"byte_end":12180,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12181,"byte_end":12184,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ loop {","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12185,"byte_end":12195,"line_start":26,"line_end":26,"column_start":1,"column_end":11}},{"value":"/     let delta = loop_helper.loop_start(); // or .loop_start_s() for f64 seconds","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12196,"byte_end":12279,"line_start":27,"line_end":27,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12280,"byte_end":12283,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/     // compute_something(delta);","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12284,"byte_end":12320,"line_start":29,"line_end":29,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12321,"byte_end":12324,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/     if let Some(fps) = loop_helper.report_rate() {","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12325,"byte_end":12379,"line_start":31,"line_end":31,"column_start":1,"column_end":55}},{"value":"/         current_fps = Some(fps.round());","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12380,"byte_end":12424,"line_start":32,"line_end":32,"column_start":1,"column_end":45}},{"value":"/     }","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12425,"byte_end":12434,"line_start":33,"line_end":33,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12435,"byte_end":12438,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/     // render_fps(current_fps);","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12439,"byte_end":12474,"line_start":35,"line_end":35,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12475,"byte_end":12478,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     loop_helper.loop_sleep(); // sleeps to acheive a 250 FPS rate","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12479,"byte_end":12548,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/ }","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12549,"byte_end":12554,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12555,"byte_end":12562,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12925,"byte_end":12942,"line_start":54,"line_end":54,"column_start":12,"column_end":29},"name":"LoopHelperBuilder","qualname":"::loop_helper::LoopHelperBuilder","value":"LoopHelperBuilder {  }","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"decl_id":null,"docs":" Builds [`LoopHelper`](struct.LoopHelper.html).\n","sig":null,"attributes":[{"value":"/ Builds [`LoopHelper`](struct.LoopHelper.html).","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":12818,"byte_end":12868,"line_start":52,"line_end":52,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13191,"byte_end":13208,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"name":"report_interval_s","qualname":"<LoopHelperBuilder>::report_interval_s","value":"pub fn report_interval_s(Self, Seconds) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the interval between\n [`LoopHelper::report_rate`](/struct.LoopHelper.html#method.report_rate) reports in seconds.\n","sig":null,"attributes":[{"value":"/ Sets the interval between","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13050,"byte_end":13079,"line_start":60,"line_end":60,"column_start":5,"column_end":34}},{"value":"/ [`LoopHelper::report_rate`](/struct.LoopHelper.html#method.report_rate) reports in seconds.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13084,"byte_end":13179,"line_start":61,"line_end":61,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13472,"byte_end":13487,"line_start":69,"line_end":69,"column_start":12,"column_end":27},"name":"report_interval","qualname":"<LoopHelperBuilder>::report_interval","value":"pub fn report_interval(Self, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the interval between\n [`LoopHelper::report_rate`](/struct.LoopHelper.html#method.report_rate) reports.\n","sig":null,"attributes":[{"value":"/ Sets the interval between","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13342,"byte_end":13371,"line_start":67,"line_end":67,"column_start":5,"column_end":34}},{"value":"/ [`LoopHelper::report_rate`](/struct.LoopHelper.html#method.report_rate) reports.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13376,"byte_end":13460,"line_start":68,"line_end":68,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13992,"byte_end":14010,"line_start":80,"line_end":80,"column_start":12,"column_end":30},"name":"native_accuracy_ns","qualname":"<LoopHelperBuilder>::native_accuracy_ns","value":"pub fn native_accuracy_ns(Self, SubsecondNanoseconds) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the native sleep accuracy.\n See [`SpinSleeper::new`](struct.SpinSleeper.html#method.new) for details.","sig":null,"attributes":[{"value":"/ Sets the native sleep accuracy.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13599,"byte_end":13634,"line_start":74,"line_end":74,"column_start":5,"column_end":40}},{"value":"/ See [`SpinSleeper::new`](struct.SpinSleeper.html#method.new) for details.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13639,"byte_end":13716,"line_start":75,"line_end":75,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13721,"byte_end":13724,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Defaults to a platform specific opinionated value, that can change from release to release.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13729,"byte_end":13824,"line_start":77,"line_end":77,"column_start":5,"column_end":100}},{"value":"/ Set this to ensure consistent behaviour across releases. However, consider that this","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13829,"byte_end":13917,"line_start":78,"line_end":78,"column_start":5,"column_end":93}},{"value":"/ value *should* be tuned & tested for a given platform.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13922,"byte_end":13980,"line_start":79,"line_end":79,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":14451,"byte_end":14476,"line_start":89,"line_end":89,"column_start":12,"column_end":37},"name":"build_without_target_rate","qualname":"<LoopHelperBuilder>::build_without_target_rate","value":"pub fn build_without_target_rate(Self) -> LoopHelper","parent":null,"children":[],"decl_id":null,"docs":" Builds a [`LoopHelper`](struct.LoopHelper.html) without targeting a rate.\n This means all calls to\n [`LoopHelper::loop_sleep`](struct.LoopHelper.html#method.loop_sleep) will simply return\n immediately. Normally used when only interested in the LoopHelper rate reporting.\n","sig":null,"attributes":[{"value":"/ Builds a [`LoopHelper`](struct.LoopHelper.html) without targeting a rate.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":14144,"byte_end":14221,"line_start":85,"line_end":85,"column_start":5,"column_end":82}},{"value":"/ This means all calls to","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":14226,"byte_end":14253,"line_start":86,"line_end":86,"column_start":5,"column_end":32}},{"value":"/ [`LoopHelper::loop_sleep`](struct.LoopHelper.html#method.loop_sleep) will simply return","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":14258,"byte_end":14349,"line_start":87,"line_end":87,"column_start":5,"column_end":96}},{"value":"/ immediately. Normally used when only interested in the LoopHelper rate reporting.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":14354,"byte_end":14439,"line_start":88,"line_end":88,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":14781,"byte_end":14803,"line_start":96,"line_end":96,"column_start":12,"column_end":34},"name":"build_with_target_rate","qualname":"<LoopHelperBuilder>::build_with_target_rate","value":"pub fn build_with_target_rate<R: Into<RatePerSecond>>(Self, R) -> LoopHelper","parent":null,"children":[],"decl_id":null,"docs":" Builds a [`LoopHelper`](struct.LoopHelper.html) targeting an input `target_rate`.\n Note: The `target_rate` only affects\n [`LoopHelper::loop_sleep`](struct.LoopHelper.html#method.loop_sleep).\n","sig":null,"attributes":[{"value":"/ Builds a [`LoopHelper`](struct.LoopHelper.html) targeting an input `target_rate`.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":14561,"byte_end":14646,"line_start":93,"line_end":93,"column_start":5,"column_end":90}},{"value":"/ Note: The `target_rate` only affects","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":14651,"byte_end":14691,"line_start":94,"line_end":94,"column_start":5,"column_end":45}},{"value":"/ [`LoopHelper::loop_sleep`](struct.LoopHelper.html#method.loop_sleep).","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":14696,"byte_end":14769,"line_start":95,"line_end":95,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":15525,"byte_end":15532,"line_start":117,"line_end":117,"column_start":12,"column_end":19},"name":"builder","qualname":"<LoopHelper>::builder","value":"pub fn builder() -> LoopHelperBuilder","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`LoopHelperBuilder`](struct.LoopHelperBuilder.html) with which to build a\n `LoopHelper`.\n","sig":null,"attributes":[{"value":"/ Returns a [`LoopHelperBuilder`](struct.LoopHelperBuilder.html) with which to build a","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":15403,"byte_end":15491,"line_start":115,"line_end":115,"column_start":5,"column_end":93}},{"value":"/ `LoopHelper`.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":15496,"byte_end":15513,"line_start":116,"line_end":116,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":15826,"byte_end":15836,"line_start":126,"line_end":126,"column_start":12,"column_end":22},"name":"loop_start","qualname":"<LoopHelper>::loop_start","value":"pub fn loop_start(&mut Self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Notifies the helper that a new loop has begun.\n Returns the delta, the duration since the last call to `loop_start` or `loop_start_s`.\n","sig":null,"attributes":[{"value":"/ Notifies the helper that a new loop has begun.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":15669,"byte_end":15719,"line_start":124,"line_end":124,"column_start":5,"column_end":55}},{"value":"/ Returns the delta, the duration since the last call to `loop_start` or `loop_start_s`.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":15724,"byte_end":15814,"line_start":125,"line_end":125,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":16254,"byte_end":16266,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"loop_start_s","qualname":"<LoopHelper>::loop_start_s","value":"pub fn loop_start_s(&mut Self) -> Seconds","parent":null,"children":[],"decl_id":null,"docs":" Notifies the helper that a new loop has begun.\n Returns the delta, the seconds since the last call to `loop_start` or `loop_start_s`.\n","sig":null,"attributes":[{"value":"/ Notifies the helper that a new loop has begun.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":16098,"byte_end":16148,"line_start":135,"line_end":135,"column_start":5,"column_end":55}},{"value":"/ Returns the delta, the seconds since the last call to `loop_start` or `loop_start_s`.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":16153,"byte_end":16242,"line_start":136,"line_end":136,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":16735,"byte_end":16745,"line_start":145,"line_end":145,"column_start":12,"column_end":22},"name":"loop_sleep","qualname":"<LoopHelper>::loop_sleep","value":"pub fn loop_sleep(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Generally called at the end of a loop to sleep until the desired delta (configured with\n [`build_with_target_rate`](struct.LoopHelperBuilder.html#method.build_with_target_rate))\n has elapsed. Uses a [`SpinSleeper`](struct.SpinSleeper.html) to sleep the thread to provide\n improved accuracy. If the delta has already elapsed this method returns immediately.\n","sig":null,"attributes":[{"value":"/ Generally called at the end of a loop to sleep until the desired delta (configured with","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":16342,"byte_end":16433,"line_start":141,"line_end":141,"column_start":5,"column_end":96}},{"value":"/ [`build_with_target_rate`](struct.LoopHelperBuilder.html#method.build_with_target_rate))","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":16438,"byte_end":16530,"line_start":142,"line_end":142,"column_start":5,"column_end":97}},{"value":"/ has elapsed. Uses a [`SpinSleeper`](struct.SpinSleeper.html) to sleep the thread to provide","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":16535,"byte_end":16630,"line_start":143,"line_end":143,"column_start":5,"column_end":100}},{"value":"/ improved accuracy. If the delta has already elapsed this method returns immediately.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":16635,"byte_end":16723,"line_start":144,"line_end":144,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":17401,"byte_end":17419,"line_start":157,"line_end":157,"column_start":12,"column_end":30},"name":"loop_sleep_no_spin","qualname":"<LoopHelper>::loop_sleep_no_spin","value":"pub fn loop_sleep_no_spin(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Generally called at the end of a loop to sleep until the desired delta (configured with\n [`build_with_target_rate`](struct.LoopHelperBuilder.html#method.build_with_target_rate))\n has elapsed. Does *not* use a  [`SpinSleeper`](struct.SpinSleeper.html), instead directly\n calls `thread::sleep` and will never spin. This is less accurate than\n [`loop_sleep`](struct.LoopHelper.html#method.loop_sleep) but less CPU intensive.\n","sig":null,"attributes":[{"value":"/ Generally called at the end of a loop to sleep until the desired delta (configured with","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":16936,"byte_end":17027,"line_start":152,"line_end":152,"column_start":5,"column_end":96}},{"value":"/ [`build_with_target_rate`](struct.LoopHelperBuilder.html#method.build_with_target_rate))","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":17032,"byte_end":17124,"line_start":153,"line_end":153,"column_start":5,"column_end":97}},{"value":"/ has elapsed. Does *not* use a  [`SpinSleeper`](struct.SpinSleeper.html), instead directly","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":17129,"byte_end":17222,"line_start":154,"line_end":154,"column_start":5,"column_end":98}},{"value":"/ calls `thread::sleep` and will never spin. This is less accurate than","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":17227,"byte_end":17300,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ [`loop_sleep`](struct.LoopHelper.html#method.loop_sleep) but less CPU intensive.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":17305,"byte_end":17389,"line_start":156,"line_end":156,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":17771,"byte_end":17782,"line_start":166,"line_end":166,"column_start":12,"column_end":23},"name":"report_rate","qualname":"<LoopHelper>::report_rate","value":"pub fn report_rate(&mut Self) -> Option<RatePerSecond>","parent":null,"children":[],"decl_id":null,"docs":" Returns the mean rate per second recorded since the last report. Returns `None` if\n the last report was within the configured `report_interval`.\n","sig":null,"attributes":[{"value":"/ Returns the mean rate per second recorded since the last report. Returns `None` if","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":17604,"byte_end":17690,"line_start":164,"line_end":164,"column_start":5,"column_end":91}},{"value":"/ the last report was within the configured `report_interval`.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":17695,"byte_end":17759,"line_start":165,"line_end":165,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":18284,"byte_end":18299,"line_start":180,"line_end":180,"column_start":12,"column_end":27},"name":"set_target_rate","qualname":"<LoopHelper>::set_target_rate","value":"pub fn set_target_rate<R: Into<RatePerSecond>>(&mut Self, R)","parent":null,"children":[],"decl_id":null,"docs":" Changes the target loop rate\n","sig":null,"attributes":[{"value":"/ Changes the target loop rate","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":18240,"byte_end":18272,"line_start":179,"line_end":179,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":18495,"byte_end":18506,"line_start":185,"line_end":185,"column_start":12,"column_end":23},"name":"target_rate","qualname":"<LoopHelper>::target_rate","value":"pub fn target_rate(&Self) -> RatePerSecond","parent":null,"children":[],"decl_id":null,"docs":" Returns the current target loop rate\n","sig":null,"attributes":[{"value":"/ Returns the current target loop rate","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":18443,"byte_end":18483,"line_start":184,"line_end":184,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1988,"byte_end":1995,"line_start":57,"line_end":57,"column_start":10,"column_end":17},"name":"Seconds","qualname":"::Seconds","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Marker alias to show the meaning of a `f64` in certain methods.\n","sig":null,"attributes":[{"value":"/ Marker alias to show the meaning of a `f64` in certain methods.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":1911,"byte_end":1978,"line_start":56,"line_end":56,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":2080,"byte_end":2093,"line_start":59,"line_end":59,"column_start":10,"column_end":23},"name":"RatePerSecond","qualname":"::RatePerSecond","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Marker alias to show the meaning of a `f64` in certain methods.\n","sig":null,"attributes":[{"value":"/ Marker alias to show the meaning of a `f64` in certain methods.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":2003,"byte_end":2070,"line_start":58,"line_end":58,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":2178,"byte_end":2189,"line_start":61,"line_end":61,"column_start":10,"column_end":21},"name":"Nanoseconds","qualname":"::Nanoseconds","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Marker alias to show the meaning of a `u64` in certain methods.\n","sig":null,"attributes":[{"value":"/ Marker alias to show the meaning of a `u64` in certain methods.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":2101,"byte_end":2168,"line_start":60,"line_end":60,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":2274,"byte_end":2294,"line_start":63,"line_end":63,"column_start":10,"column_end":30},"name":"SubsecondNanoseconds","qualname":"::SubsecondNanoseconds","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Marker alias to show the meaning of a `u32` in certain methods.\n","sig":null,"attributes":[{"value":"/ Marker alias to show the meaning of a `u32` in certain methods.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":2197,"byte_end":2264,"line_start":62,"line_end":62,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":2437,"byte_end":2448,"line_start":67,"line_end":67,"column_start":12,"column_end":23},"name":"SpinSleeper","qualname":"::SpinSleeper","value":"SpinSleeper {  }","parent":null,"children":[{"krate":0,"index":112}],"decl_id":null,"docs":" Accuracy container for spin sleeping. See [crate docs](index.html).\n","sig":null,"attributes":[{"value":"/ Accuracy container for spin sleeping. See [crate docs](index.html).","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":2303,"byte_end":2374,"line_start":65,"line_end":65,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4098,"byte_end":4101,"line_start":128,"line_end":128,"column_start":12,"column_end":15},"name":"new","qualname":"<SpinSleeper>::new","value":"pub fn new(SubsecondNanoseconds) -> SpinSleeper","parent":null,"children":[],"decl_id":null,"docs":" Constructs new SpinSleeper with the input native sleep accuracy.\n The lower the `native_accuracy_ns` the more we effectively trust the accuracy of the\n `thread::sleep` function.\n","sig":null,"attributes":[{"value":"/ Constructs new SpinSleeper with the input native sleep accuracy.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":3877,"byte_end":3945,"line_start":124,"line_end":124,"column_start":5,"column_end":73}},{"value":"/ The lower the `native_accuracy_ns` the more we effectively trust the accuracy of the","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":3950,"byte_end":4038,"line_start":125,"line_end":125,"column_start":5,"column_end":93}},{"value":"/ `thread::sleep` function.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4043,"byte_end":4072,"line_start":126,"line_end":126,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4077,"byte_end":4086,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4268,"byte_end":4286,"line_start":133,"line_end":133,"column_start":12,"column_end":30},"name":"native_accuracy_ns","qualname":"<SpinSleeper>::native_accuracy_ns","value":"pub fn native_accuracy_ns(Self) -> SubsecondNanoseconds","parent":null,"children":[],"decl_id":null,"docs":" Returns configured native_accuracy_ns\n","sig":null,"attributes":[{"value":"/ Returns configured native_accuracy_ns","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4215,"byte_end":4256,"line_start":132,"line_end":132,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4664,"byte_end":4669,"line_start":142,"line_end":142,"column_start":12,"column_end":17},"name":"sleep","qualname":"<SpinSleeper>::sleep","value":"pub fn sleep(Self, Duration)","parent":null,"children":[],"decl_id":null,"docs":" Puts the current thread to sleep, if duration is long enough, then spins until the\n specified duration has elapsed.","sig":null,"attributes":[{"value":"/ Puts the current thread to sleep, if duration is long enough, then spins until the","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4362,"byte_end":4448,"line_start":137,"line_end":137,"column_start":5,"column_end":91}},{"value":"/ specified duration has elapsed.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4453,"byte_end":4488,"line_start":138,"line_end":138,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4493,"byte_end":4496,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ **Windows**: Automatically selects the best native sleep accuracy generally achieving ~1ms","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4501,"byte_end":4595,"line_start":140,"line_end":140,"column_start":5,"column_end":99}},{"value":"/ native sleep accuracy, instead of default ~16ms.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":4600,"byte_end":4652,"line_start":141,"line_end":141,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5337,"byte_end":5344,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"sleep_s","qualname":"<SpinSleeper>::sleep_s","value":"pub fn sleep_s(Self, Seconds)","parent":null,"children":[],"decl_id":null,"docs":" Puts the current thread to sleep, if duration is long enough, then spins until the\n specified second duration has elapsed.","sig":null,"attributes":[{"value":"/ Puts the current thread to sleep, if duration is long enough, then spins until the","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5028,"byte_end":5114,"line_start":154,"line_end":154,"column_start":5,"column_end":91}},{"value":"/ specified second duration has elapsed.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5119,"byte_end":5161,"line_start":155,"line_end":155,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5166,"byte_end":5169,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ **Windows**: Automatically selects the best native sleep accuracy generally achieving ~1ms","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5174,"byte_end":5268,"line_start":157,"line_end":157,"column_start":5,"column_end":99}},{"value":"/ native sleep accuracy, instead of default ~16ms.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5273,"byte_end":5325,"line_start":158,"line_end":158,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5790,"byte_end":5798,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"sleep_ns","qualname":"<SpinSleeper>::sleep_ns","value":"pub fn sleep_ns(Self, Nanoseconds)","parent":null,"children":[],"decl_id":null,"docs":" Puts the current thread to sleep, if duration is long enough, then spins until the\n specified nanosecond duration has elapsed.","sig":null,"attributes":[{"value":"/ Puts the current thread to sleep, if duration is long enough, then spins until the","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5477,"byte_end":5563,"line_start":165,"line_end":165,"column_start":5,"column_end":91}},{"value":"/ specified nanosecond duration has elapsed.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5568,"byte_end":5614,"line_start":166,"line_end":166,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5619,"byte_end":5622,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ **Windows**: Automatically selects the best native sleep accuracy generally achieving ~1ms","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5627,"byte_end":5721,"line_start":168,"line_end":168,"column_start":5,"column_end":99}},{"value":"/ native sleep accuracy, instead of default ~16ms.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":5726,"byte_end":5778,"line_start":169,"line_end":169,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6467,"byte_end":6472,"line_start":187,"line_end":187,"column_start":8,"column_end":13},"name":"sleep","qualname":"::sleep","value":"pub fn sleep(Duration)","parent":null,"children":[],"decl_id":null,"docs":" Puts the current thread to sleep, if duration is long enough, then spins until the\n specified nanosecond duration has elapsed.","sig":null,"attributes":[{"value":"/ Puts the current thread to sleep, if duration is long enough, then spins until the","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6009,"byte_end":6095,"line_start":177,"line_end":177,"column_start":1,"column_end":87}},{"value":"/ specified nanosecond duration has elapsed.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6096,"byte_end":6142,"line_start":178,"line_end":178,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6143,"byte_end":6146,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ Uses default native accuracy.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6147,"byte_end":6180,"line_start":180,"line_end":180,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6181,"byte_end":6184,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ Convenience function for `SpinSleeper::default().sleep(duration)`. Can directly take the","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6185,"byte_end":6277,"line_start":182,"line_end":182,"column_start":1,"column_end":93}},{"value":"/ place of `thread::sleep`.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6278,"byte_end":6307,"line_start":183,"line_end":183,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6308,"byte_end":6311,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ **Windows**: Automatically selects the best native sleep accuracy generally achieving ~1ms","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6312,"byte_end":6406,"line_start":185,"line_end":185,"column_start":1,"column_end":95}},{"value":"/ native sleep accuracy, instead of default ~16ms.","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":6407,"byte_end":6459,"line_start":186,"line_end":186,"column_start":1,"column_end":53}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13026,"byte_end":13043,"line_start":59,"line_end":59,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":15386,"byte_end":15396,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":3522,"byte_end":3533,"line_start":110,"line_end":110,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":3859,"byte_end":3870,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":13026,"byte_end":13043,"line_start":59,"line_end":59,"column_start":6,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\loop_helper.rs","byte_start":15386,"byte_end":15396,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":77},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":3522,"byte_end":3533,"line_start":110,"line_end":110,"column_start":18,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":111},"to":{"krate":2,"index":2994}},{"span":{"file_name":"C:\\Users\\Balot\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\spin_sleep-1.0.0\\src\\lib.rs","byte_start":3859,"byte_end":3870,"line_start":123,"line_end":123,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":111},"to":{"krate":4294967295,"index":4294967295}}]}